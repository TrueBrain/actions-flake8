name: 'Flake8 with annotations'
author: 'Patric "TrueBrain" Stout'
description: 'Flake8 with annotations for Pull Request'
inputs:
  path:
    description: 'Path to run flake8 in'
    required: false
    default: ''
  ignore:
    description: 'Skip errors and warnings (e.g. E4,W)'
    required: false
    default: ''
  max_line_length:
    description: 'Set maximum allowed line length'
    required: false
    default: ''
  only_warn:
    description: 'If set, only warn, never error'
    required: false
    default: ''
  flake8_version:
    description: 'What flake8 version to use, if none is installed (default is latest)'
    required: false
    default: ''
  plugins:
    description: 'List of plugins to install before running, this is passed directly to pip install'
    required: false
    default: ''
  error_classes:
    description: 'List of flake8 error classes to classify as Error'
    required: false
    default: 'E,F'
  warning_classes:
    description: 'List of flake8 error classes to classify as Warning'
    required: false
    default: ''
  extra_arguments:
    description: 'Extra arguments given to flake8'
    required: false
    default: ''
  working_directory:
    description: 'Working directory to run flake8 in'
    required: false
    default: '.'

runs:
  using: 'composite'
  steps:
  - run: |
      if [ -z "${{ inputs.flake8_version }}" ]; then
        flake8_version=""
      else
        flake8_version="==${{ inputs.flake8_version }}"
      fi
      plugins=
      if [ -n "${{ inputs.plugins }}" ]; then
        plugins="${{ inputs.plugins }}"
      fi
      pip install flake8${flake8_version} ${plugins}
    shell: bash
  - run: ${{ github.action_path }}/action/entrypoint.sh
    shell: bash
    working-directory: ${{ inputs.working_directory }}
    env:
      INPUT_PATH: ${{ inputs.path }}
      INPUT_IGNORE: ${{ inputs.ignore }}
      INPUT_MAX_LINE_LENGTH: ${{ inputs.max_line_length }}
      INPUT_ONLY_WARN: ${{ inputs.only_warn }}
      INPUT_ERROR_CLASSES: ${{ inputs.error_classes }}
      INPUT_WARNING_CLASSES: ${{ inputs.warning_classes }}
      INPUT_EXTRA_ARGUMENTS: ${{ inputs.extra_arguments }}
branding:
  icon: 'code'
  color: 'blue'
